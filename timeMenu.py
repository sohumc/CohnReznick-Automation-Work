#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.3
# In conjunction with Tcl version 8.6
#    Jul 11, 2014 11:24:41 AM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *
import Tkinter
try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import timeMenu_support

doSharepoint = False
doElite = False
doCheck = False
def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root

    root = Tk()
    root.title('TimeEntry Automator')
    root.geometry('486x262+650+162')
    timeMenu_support.set_Tk_var()
    w = TimeEntry_Automator (root)
    timeMenu_support.init(root, w)
    root.mainloop()

w = None
def create_TimeEntry_Automator (root, param=None):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    w.title('TimeEntry Automator')
    w.geometry('486x262+650+162')
    timeMenu_support.set_Tk_var()
    w_win = TimeEntry_Automator (w)
    timeMenu_support.init(w, w_win, param)
    return w_win

def destroy_TimeEntry_Automator ():
    global w
    w.destroy()
    w = None


class TimeEntry_Automator:

    def __init__(self, master):
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        master.configure(background=_bgcolor)
        master.configure(highlightbackground="#d9d9d9")
        master.configure(highlightcolor="black")


        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active',_ana2color)])
        self.TCheckbutton2 = ttk.Checkbutton (master)
        self.TCheckbutton2.place(relx=0.04,rely=0.7,relheight=0.08,relwidth=4.0)
        timeMenu_support.tch41 = IntVar()
        self.TCheckbutton1 = ttk.Checkbutton (master)
        self.TCheckbutton1.place(relx=0.04,rely=0.21,relheight=0.08
                ,relwidth=0.28)
        self.TCheckbutton1.configure(variable=timeMenu_support.tch41)
        self.TCheckbutton1.configure(takefocus="")
        self.TCheckbutton1.configure(text='''Upload to Sharepoint''')
        self.TCheckbutton1.configure(command = lambda: self.changeState(timeMenu_support.tch41.get()))

        self.TCheckbutton2.configure(variable=timeMenu_support.tch42)
        self.TCheckbutton2.configure(takefocus="")
        self.TCheckbutton2.configure(text='''Upload to Elite''')

        self.TCheckbutton3 = ttk.Checkbutton (master)
        self.TCheckbutton3.place(relx=0.04,rely=0.84,relheight=0.08
                ,relwidth=0.37)
        self.TCheckbutton3.configure(variable=timeMenu_support.tch43)
        self.TCheckbutton3.configure(takefocus="")
        self.TCheckbutton3.configure(text='''Verify Upload Data''')
        self.TCheckbutton3.configure(command = lambda: self.changeState(timeMenu_support.tch43.get()))


        self.TButton1 = ttk.Button (master)
        self.TButton1.place(relx=0.76,rely=0.34,height=75,width=96)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''OK''')
        self.TButton1.configure(command = self.okButton)

        self.TEntry1 = ttk.Entry (master)
        self.TEntry1.place(relx=0.23,rely=0.31,relheight=0.08,relwidth=0.26)
        self.TEntry1.configure(state=DISABLED)
        self.TEntry1.configure(textvariable=timeMenu_support.nameInput)
        self.TEntry1.configure(cursor="ibeam")

        self.Label1 = Label (master)
        self.Label1.place(relx=0.08,rely=0.31,height=21,width=60)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background=_bgcolor)
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Full Name''')

        self.TEntry2 = ttk.Entry (master)
        self.TEntry2.place(relx=0.23,rely=0.44,relheight=0.08,relwidth=0.26)
        self.TEntry2.configure(state=DISABLED)
        self.TEntry2.configure(textvariable=timeMenu_support.userInput)
        self.TEntry2.configure(takefocus="")
        self.TEntry2.configure(cursor="ibeam")

        self.TEntry3 = ttk.Entry (master)
        self.TEntry3.place(relx=0.23,rely=0.57,relheight=0.08,relwidth=0.26)
        self.TEntry3.configure(state=DISABLED)
        self.TEntry3.configure(textvariable=timeMenu_support.passwordInput)
        self.TEntry3.configure(takefocus="")
        self.TEntry3.configure(cursor="ibeam")
        self.TEntry3.configure(show = "*")


        self.passwordButton = Label (master)
        self.passwordButton.place(relx=0.08,rely=0.56,height=21,width=56)
        self.passwordButton.configure(activebackground="#f9f9f9")
        self.passwordButton.configure(activeforeground="black")
        self.passwordButton.configure(background=_bgcolor)
        self.passwordButton.configure(disabledforeground="#a3a3a3")
        self.passwordButton.configure(foreground="#000000")
        self.passwordButton.configure(highlightbackground="#d9d9d9")
        self.passwordButton.configure(highlightcolor="black")
        self.passwordButton.configure(text='''Password''')

        self.UserNameButton = Label (master)
        self.UserNameButton.place(relx=0.08,rely=0.44,height=21,width=60)
        self.UserNameButton.configure(activebackground="#f9f9f9")
        self.UserNameButton.configure(activeforeground="black")
        self.UserNameButton.configure(background=_bgcolor)
        self.UserNameButton.configure(disabledforeground="#a3a3a3")
        self.UserNameButton.configure(foreground="#000000")
        self.UserNameButton.configure(highlightbackground="#d9d9d9")
        self.UserNameButton.configure(highlightcolor="black")
        self.UserNameButton.configure(text='''User Name''')

        self.Label2 = Label (master)
        self.Label2.place(relx=0.04,rely=0.08,height=21,width=264)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background=_bgcolor)
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(relief=GROOVE)
        self.Label2.configure(text='''Choose Task''')

        self.menubar = Menu(master,bg=_bgcolor,fg=_fgcolor)
        master.configure(menu = self.menubar)

    def okButton(self):
        timeMenu_support.USER = timeMenu_support.userInput.get()
        timeMenu_support.FULLNAME = timeMenu_support.nameInput.get()
        timeMenu_support.PASSWORD = timeMenu_support.passwordInput.get()
        timeMenu_support.doSharepoint = timeMenu_support.tch41.get() == 1
        timeMenu_support.doElite = timeMenu_support.tch42.get() == 1
        timeMenu_support.doCheck = timeMenu_support.tch43.get() == 1
        # print USER
        # print FULLNAME
        # print PASSWORD
        # print doSharepoint
        # print doElite
        # print doCheck
        tkinter.quit()



    def changeState(self, checkboxData):
        if checkboxData == 1:
            self.TEntry1.configure(state=NORMAL)
            self.TEntry3.configure(state=NORMAL)
            self.TEntry2.configure(state=NORMAL)
        if checkboxData == 0:
            self.TEntry1.configure(state=DISABLED)
            self.TEntry3.configure(state=DISABLED)
            self.TEntry2.configure(state=DISABLED)

 # if __name__ == '__main__':
    # vp_start_gui()




